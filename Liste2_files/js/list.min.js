var lastDivFocus = null;
var lastIndexFocus = null;
var lastSearchMatch = null;
var searchMsgEnable = false;
var timerSearch = null;

function listExpandClick(a) { list.expand($(a).parent().parent()) }

function listDivDblClick(a) { if ($(a).parent().attr("data-id") != "1") { list.expand($(a).parent()) } if (document.selection && document.selection.empty) { document.selection.empty() } else { if (window.getSelection) { window.getSelection().removeAllRanges() } } }

function listDivFocus(c) { if ($(c).prop("tagName") == "HTML") { return } var g = $(c).attr("tabindex"); var j = $(c).parent().attr("tabindex"); var f = g ? g : j; var a = g ? c : $(c).parent(); var b = $(c).attr("class"); var e = b && b == "md" || b == "d" || b == "do" || b == "f"; var i = $(c).parent().attr("id") == "toolTip" || $(c).parent().parent().attr("id") == "toolTip"; var h = $(c).attr("id") == "search"; var d = function() { $('[tabindex="' + lastIndexFocus + '"]').removeClass("selected");
        lastIndexFocus = null;
        lastDivFocus = null }; if ((g || (j && e)) && lastIndexFocus != f) { if (lastIndexFocus) { d() } if ($("#toolTip").css("display") == "none" && toolTipEnable) { $("#toolTip").fadeIn(150) }
        lastDivFocus = a;
        lastIndexFocus = f;
        $(a).addClass("selected"); if (toolTipEnable) { $("#toolTip div").html(list.toolTip($(a).parent())) } } if (!f && lastIndexFocus && !i && !h) { if (toolTipEnable) { $("#toolTip").fadeOut(150) }
        d() } }
$(document).ready(function() { var e = new Image();
    e.src = $("#loadMobile").attr("src");
    $(document).click(function(f) { c(f.target);
        listDivFocus(f.target) });
    $('img[data-button="about"]').click(function() { $("#about").fadeIn() });

    function c(g) { var f = $("#about").get(0); if (g == f) { $(f).fadeOut() } }

    function d(f) { var g = $(f).attr("class"); if (g == "selected") { $(f).removeClass("selected") } else { $(f).addClass("selected") } return g == "selected" }
    $([
        ["tree", treeEnable],
        ["toolTip", toolTipEnable],
        ["info", infoEnable]
    ]).each(function() { if (this[1]) { $('img[data-button="' + this[0] + '"]').addClass("selected") } });

    function b(f) { list.loading.start();
        setTimeout(function(g) { $("style").get(0).remove();
            setStyle();
            list.loading.stop() }, 16, this) }

    function a(h, k) { var j = $(k).val().trim().replace(/<br>|&nbsp;/g, "").replace(/\+/g, " "); var f = true; if (lastSearchMatch && lastSearchMatch.length > 0 && h.type == "keydown" && h.keyCode && h.keyCode == 13) { $("#searchMsg").fadeOut(150);
            $(".redMatch").removeClass("redMatch");
            searchMsgEnable = false;
            list.searchMatchOpen($(lastDivFocus).parent(), j); return } else { if (h.type == "keyup" && h.keyCode && h.keyCode == 13) { return } } if (j.length > 0) { var i = ""; var g = $(lastDivFocus).find("> i").eq(0).attr("class"); try { new RegExp(j) } catch (h) { f = false } if (!f) { i = lang.searchInvalidRegex } else { if (g == "_p") { i = lang.searchDirEmpty } else { if (!lastDivFocus || !(g && g == "p" || g == "l" || g == "md")) { i = lang.searchNoDir } else { i = lang.searchLoad;
                        clearTimeout(timerSearch);
                        timerSearch = setTimeout(function() { var n = list.searchMatch($(lastDivFocus).parent(), j); var l = n.length; var m = l > 1 ? lang.toolTipPlural : ""; var o;
                            lastSearchMatch = n; if (l > 0) { o = list.nbFormat.format(l) + " " + lang.searchItem + m + " " + lang.searchFound + m + lang.searchSucces } else { o = lang.searchNoFound }
                            $("#searchMsg").html("<span></span>" + o) }, 300) } } }
            $("#searchMsg").html("<span></span>" + i); if (!searchMsgEnable) { $("#searchMsg").fadeIn(150);
                searchMsgEnable = true } } else { $("#searchMsg").fadeOut(150);
            searchMsgEnable = false } }
    $("#search").blur(function() { $("#searchMsg").fadeOut(150);
        searchMsgEnable = false });
    $('img[data-button="search"]').click(function() { var f = { type: "keydown", keyCode: 13 };
        a(f, this) });
    $("#search").on("keydown keyup focus", function(f) { a(f, this) });
    $('img[data-button="expand"]').click(function() { list.expandAll() });
    $('img[data-button="top"]').click(function() { $("html, body").stop().animate({ scrollTop: 0 }, 150) });
    $('img[data-button="tree"]').click(function() { treeEnable = !d(this);
        b() });
    $('img[data-button="toolTip"]').click(function() { toolTipEnable = !d(this); if (!toolTipEnable) { $("#toolTip").fadeOut(150) } });
    $('img[data-button="info"]').click(function() { infoEnable = !d(this);
        b() });
    document.title = lang.metaTitle;
    $('img[data-button="expand"]').attr("title", lang.navBarTitleExpand);
    $('img[data-button="top"]').attr("title", lang.navBarTitleTop);
    $('img[data-button="tree"]').attr("title", lang.navBarTitleTree);
    $('img[data-button="toolTip"]').attr("title", lang.navBarTitleToolTip);
    $('img[data-button="info"]').attr("title", lang.navBarTitleInfo);
    $('img[data-button="about"]').attr("title", lang.navBarTitleAbout);
    $("#navBar > em").eq(0).html(lang.loading);
    $("#about > div").eq(0).html(lang.aboutBox);
    list.init() });
var list = { firstExpanded: {}, expanded: {}, nbExpand: 0, nbFormat: new Intl.NumberFormat(), expanding: false, loading: { start: function() { $("#navBar .load").css({ display: "inline-block" }); var a = $("#loadMobile").attr("src");
            $("#loadMobile").attr("src", a.replace(/(.+\/).+\.svg$/, "$1loading.svg")) }, stop: function() { $("#navBar .load").css({ display: "none" }); var a = $("#loadMobile").attr("src");
            $("#loadMobile").attr("src", a.replace(/(.+\/).+\.svg$/, "$1loadingMonochrome.svg")) } }, init: function() { setTimeout(function(a) { a.root();
            a.loading.stop() }, 16, this) }, reset: function() { this.firstExpanded = {};
        this.expanded = {};
        this.nbExpand = 0 }, root: function() { var b = this; var a = "";
        $("#listMainDir").html('<i class="md"></i>' + (DATA.name != "/?ROOT?/" ? DATA.name : lang.rootDefault));
        this.count(DATA);
        this.folderSize(DATA);
        $("#list > small").html(this.info(DATA));
        $(DATA.child).each(function(c) { a += b.line(c, (c == DATA.child.length - 1), this, false) });
        $('#list ul[data-parent="0"]').append(a) }, block: function(c, b) { var d = this; var a = ""; if (!this.firstExpanded[c.id]) { this.firstExpanded[c.id] = true;
            a += '<ul data-parent="' + c.id + '">';
            $(c.child).each(function(e) { a += d.line(e, (e == c.child.length - 1), this, b) });
            a += "</ul>" } return a }, line: function(d, h, b, f) { if (b.child) { this.count(b);
            this.folderSize(b) } else { if (DATA.sizeEnable && b.isFolder) { b.size = 0 } } var g = '<i onclick="listExpandClick(this)" class="' + (b.child ? (f ? "l" : "p") : "_p") + '"></i>'; var e = '<i class="' + (b.isFolder ? (f ? "do" : "d") : "f") + '"></i>'; var i = h ? '<b class="vBar"></b>' : ""; var a = ""; if (f && b.child) { this.expanded[b.id] = true;
            this.nbExpand++;
            a = this.block(b, true) } var c = '<li data-id="' + b.id + '" data-pos="' + d + '"><b class="hBar"></b><div ondblclick="listDivDblClick(this)" tabindex="' + b.id + '">' + (b.isFolder ? g : "") + e + b.name + "</div><small> " + this.info(b) + "</small>" + a + i + "</li>"; return c }, expand: function(a) { var b = $(a).find("> div > i").eq(0); if (b.attr("class") == "_p" || b.attr("class") == "f") { if (b.attr("class") == "f") { var c = this.find.data(a); if (c.path) { window.open(c.path) } } return } if (!this.expanding) { this.loading.start();
            this.expanding = true;
            setTimeout(function(d) { var e = d.find.data(a); if (!d.expanded[e.id]) { b.attr("class", "l");
                    $(a).find("i").eq(1).attr("class", "do");
                    $(a).append(d.block(e, false));
                    d.nbExpand++;
                    d.expanded[e.id] = true;
                    a.find("> ul:first").css({ display: "none", visibility: "hidden" });
                    a.find("> ul:first").slideDown(150, function() { a.find("> ul:first").css({ display: "none", visibility: "visible" });
                        a.find("> ul:first").fadeIn(150, function() { d.expanding = false }) });
                    d.loading.stop() } else { b.attr("class", "p");
                    $(a).find("> div > i").eq(1).attr("class", "d");
                    d.nbExpand--;
                    d.expanded[e.id] = false;
                    a.find("> ul:first").css({ visibility: "hidden" });
                    a.find("> ul:first").slideUp(150, function() { d.expanding = false });
                    d.loading.stop() } }, 16, this) } }, expandAll: function() { this.loading.start();
        setTimeout(function(b) { var d = b; var c = true;
            $('ul[data-parent="0"]').html("");
            $(DATA.child).each(function(e) { if (b.expanded[this.id]) { c = false } }); if (b.nbExpand <= 0 || c) { b.reset(); var a = "";
                $(DATA.child).each(function(e) { a += d.line(e, (e == DATA.child.length - 1), this, true) });
                $('#list ul[data-parent="0"]').append(a) } else { b.reset();
                b.root() }
            b.loading.stop() }, 16, this) }, expandThatNode: function(knotsToOpen) { var ul = $('ul[data-parent="0"]'); var forEval = "DATA"; for (var i = 0; i < knotsToOpen.length; i++) { if (!knotsToOpen[i][1]) { ul.find("> li > div").eq(knotsToOpen[i][0]).addClass("redMatch") } else { forEval += ".child[" + knotsToOpen[i][0] + "]"; var li = ul = ul.find("> li").eq(knotsToOpen[i][0]); var liRound = li.find("> div > i").eq(0); var data = eval(forEval); var html = this.block(data, false); if (html != "") { li.append(html) } if (!this.expanded[data.id]) { this.nbExpand++;
                    this.expanded[data.id] = true } else { liRound.attr("class", "l") }
                ul = li.find("> ul").eq(0);
                ul.css({ display: "block", visibility: "visible" }) } } }, find: { recursive: function(b, d, a) { var c = true; while (c) { b.push(a.attr("data-pos")); if (d.attr("data-parent") == "0") { c = false } else { d = d.parent().parent();
                    a = a.parent().parent() } } }, data: function(li) { var parents = new Array(); var ul = li.parent(); if (!ul.attr("data-parent")) { return DATA }
            this.recursive(parents, ul, li);
            parents.reverse(); var find = "DATA.child[";
            find += parents.join("].child[");
            find += "]"; return eval(find) }, path: function(li) { var parents = new Array(); var path = new Array(); var ul = li.parent(); if (!ul.attr("data-parent")) { return DATA.name == "/?ROOT?/" ? lang.rootDefault : DATA.name }
            this.recursive(parents, ul, li);
            parents.reverse(); for (var i = 0; i < parents.length; i++) { var find = "DATA.child[";
                find += $.grep(parents, Boolean).join("].child[");
                find += "].name";
                delete parents[parents.length - i - 1];
                path.push(eval(find)) }
            path.push(DATA.name == "/?ROOT?/" ? lang.rootDefault : DATA.name); return path.reverse() } }, searchMatch: function(a, c) { var e = this.find.data(a); var d = [];

        function b(f) { f.child.filter(function(g) { if (g.name.match(new RegExp(c, "i"))) { d.push(g.id) } if (g.child) { b(g) } }) }
        b(e); return d }, searchMatchOpen: function() { this.loading.start();
        setTimeout(function(d) { var a = [];

            function b(g, h) { var f = 0; var e = g.child.filter(function(i) { if (i.id == h) { a.push([f, false]); return true } if (i.child) { if (b(i, h).length > 0) { a.push([f, true]); return true } }
                    f++ }); return e } for (var c = 0; c < lastSearchMatch.length; c++) { b(DATA, lastSearchMatch[c]);
                d.expandThatNode(a.reverse());
                a = [] }
            d.loading.stop() }, 300, this) }, count: function(d) { if (d.isCount) { return } var f = 0; var a = 0; var b = 0; var e = 0;
        d.child.filter(function(g) { g.isFolder ? f++ : a++ });

        function c(g) { g.child.filter(function(h) { h.isFolder ? b++ : e++; if (h.child) { c(h) } }) }
        c(d);
        d.isCount = true;
        d.nbDirThis = f;
        d.nbFileThis = a;
        d.nbDir = b;
        d.nbFile = e }, folderSize: function(b) { if (!DATA.sizeEnable) { return } var c = 0;

        function a(d) { d.child.filter(function(e) { if (!e.isFolder) { c += e.fileSize } if (e.child) { a(e) } }) }
        a(b);
        b.size = c }, convertSize: function(c) { if (c === 0) { return 0 + " octet" } var a = Math.sign(c);
        c = Math.abs(c); var d = [
            [1, "octets"],
            [1024, "Ko"],
            [1024 * 1024, "Mo"],
            [1024 * 1024 * 1024, "Go"],
            [1024 * 1024 * 1024 * 1024, "To"],
            [1024 * 1024 * 1024 * 1024 * 1024, "Po"],
            [1024 * 1024 * 1024 * 1024 * 1024 * 1024, "Eo"],
            [1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024, "Zo"],
            [1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024, "Yo"],
            [1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024, "kYo"]
        ]; for (var b = 0; b < d.length; b++) { if (c < d[b][0]) { return (a * (c / d[b - 1][0])).toFixed(2).replace(/\.00?$|(\.[A-Za-z0-9])0$/, "$1") + " " + d[b - 1][1] } } return (a * (c / d[d.length - 1][0])).toFixed(2).replace(/\.00?$|(\.[A-Za-z0-9])0$/, "$1") + " " + d[d.length - 1][1] }, info: function(b) { var c = "";
        c += "["; if (b.isFolder) { if (b.nbDir + b.nbFile > 0) { if (b.nbDir > 0) { c += list.nbFormat.format(b.nbDir) + " " + lang.toolTipDir + (b.nbDir > 1 ? lang.toolTipPlural : "") } if (b.nbFile > 0) { c += (b.nbDir > 0 ? ", " : "") + list.nbFormat.format(b.nbFile) + " " + lang.toolTipFile + (b.nbFile > 1 ? lang.toolTipPlural : "") } if (DATA.sizeEnable) { c += (b.nbDir + b.nbFile > 0 ? ", " : "") + this.convertSize(b.size) } } else { c += lang.toolTipDirEmpty } } else { c += b.type; if (DATA.sizeEnable) { c += ", " + this.convertSize(b.fileSize) } }
        c += "]"; var a = []; if (b.dateCreate) { a.push(lang.toolTipCreate.toLowerCase() + b.dateCreate) } if (b.dateEdit) { a.push(lang.toolTipEdit.toLowerCase() + b.dateEdit) } if (b.dateAccess) { a.push(lang.toolTipAccess.toLowerCase() + b.dateAccess) }
        c += " " + a.join(", "); return c }, toolTip: function(a) { var e = this.find.data(a); var f = function(m, j, k) {
            function i(n, o) { return list.nbFormat.format(n) + " " + o + (n > 1 ? lang.toolTipPlural : "") } var l = "<strong>" + m + "</strong><br>"; if (j && !k) { l += i(j, lang.toolTipDir) } else { if (!j && k) { l += i(k, lang.toolTipFile) } else { if (!j && !k) { l += lang.toolTipDirEmpty } else { l += i(j, lang.toolTipDir);
                        l += lang.toolTipAnd;
                        l += i(k, lang.toolTipFile) } } } return l + "<hr>" }; var c = this.find.path(a); var h = DATA.sizeEnable ? this.convertSize(e.size) : ""; var g = '<div id="' + (e.isFolder ? "dir" : "file") + '">' + (!e.isFolder ? e.type : h) + "</div>";
        g += "<h2>" + (e.idParent == 0 && e.name == "/?ROOT?/" ? lang.rootDefault : e.name) + "</h2>"; if (e.isFolder) { g += f(lang.toolTipTitleNbDir, e.nbDirThis, e.nbFileThis); if (e.nbDir) { g += f(lang.toolTipTitleNbDirNSubdir, e.nbDir, e.nbFile) } } if (!e.isFolder && DATA.sizeEnable) { g += "<strong>" + lang.toolTipTitleSize + "</strong><br>";
            g += this.convertSize(e.fileSize);
            g += "<hr>" } var b = []; if (e.dateCreate) { b.push(lang.toolTipCreate + e.dateCreate) } if (e.dateEdit) { b.push(lang.toolTipEdit + e.dateEdit) } if (e.dateAccess) { b.push(lang.toolTipAccess + e.dateAccess) } if (b.length > 0) { g += "<strong>" + lang.toolTipTitleDate + "</strong><br>";
            g += b.join("<br>");
            g += "<hr>" }
        g += "<strong>" + lang.toolTipTitlePathRelative + "</strong><br>";
        g += "<span>"; if ($.isArray(c)) { for (var d = 0; d < c.length; d++) { g += c[d]; if (d != c.length - 1) { g += " &#x21E8; " } } } else { g += c }
        g += "</span>"; if (e.path) { g += "<hr>";
            g += "<strong>" + lang.toolTipTitlePathReal + "</strong><br>";
            g += "<span>" + e.path + "</span>" } return g } };